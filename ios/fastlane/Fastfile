# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  $keychain_name = SecureRandom.uuid
  $keychain_password = SecureRandom.hex(100)
  $is_ci = ENV['CI']

  after_all do |lane, options|
    remove_keychain
  end

  error do |lane, exception, options|
    remove_keychain
  end

  desc "Remove Keychain from CI"
  private_lane :remove_keychain do |options|
      if $is_ci
          if File.exist?(File.expand_path("~/Library/Keychains/#{$keychain_name}-db"))
              UI.important "Deleting keychain #{$keychain_name}"
              delete_keychain(name: $keychain_name)
          elsif
              UI.important "No keychain file found to delete"
          end
      end
  end

  desc "Setup Keychain for match on CI"
  private_lane :setup_keychain do |options|
      create_keychain(
          name: $keychain_name,
          password: $keychain_password,
          default_keychain: true,
          unlock: false,
          timeout: 0,
          lock_when_sleeps: true
      )
  end


  desc "Push a new dev release build to the App Store"
  lane :dev_store do
    build_dev
    upload_to_app_store
  end

  desc "Push a new dev release build to the testflight"
  lane :dev_test do
    build_dev
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  private_lane :build_dev do
    init_ci
    certificates_dev
    build_number
    disable_automatic_code_signing(path: "./Runner.xcodeproj")
    build_app(workspace: "Runner.xcworkspace", scheme: "dev")
    enable_automatic_code_signing(path: "./Runner.xcodeproj")
  end

  desc "Push a new prod release build to the App Store"
  lane :prod_store do
    build_prod
    upload_to_app_store(app_identifier: "com.tob.soulmate.prod")
  end

  desc "Push a new prod release build to the testflight"
  lane :prod_test do
    build_prod
    upload_to_testflight(skip_waiting_for_build_processing: true, app_identifier: "com.tob.soulmate.prod")
  end

  private_lane :build_prod do
    init_ci
    certificates_prod
    build_number
    disable_automatic_code_signing(path: "./Runner.xcodeproj")
    build_app(workspace: "Runner.xcworkspace", scheme: "prod")
    enable_automatic_code_signing(path: "./Runner.xcodeproj")
  end

  private_lane :init_ci do
    setup_ci if $is_ci
    login
    if $is_ci  
      UI.message "Installing Apple Certificates and Provisioning Profiles for CI"
      setup_keychain
    end
  end

  private_lane :build_number do
    increment_build_number(build_number: latest_testflight_build_number + 1)
  end

  private_lane :certificates_dev do
    if $is_ci  
      match(
        type: "appstore",
        app_identifier: ["com.tob.soulmate.dev"], 
        readonly: true,
        keychain_name: $keychain_name,
        keychain_password: $keychain_password
      )
    elsif
      match(type: "development", app_identifier: ["com.tob.soulmate.dev"])
      match(type: "appstore", app_identifier: ["com.tob.soulmate.dev"])
    end 
  end

  private_lane :certificates_prod do
    if $is_ci  
      match(
        type: "appstore",
        app_identifier: ["com.tob.soulmate.prod"], 
        readonly: true,
        keychain_name: $keychain_name,
        keychain_password: $keychain_password
      )
    elsif
      match(type: "development", app_identifier: ["com.tob.soulmate.prod"])
      match(type: "appstore", app_identifier: ["com.tob.soulmate.prod"])
    end
  end

  desc "Get Apple API Token"
  private_lane :login do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_KEY'],
    
      duration: 2400,
      in_house: false,
      is_key_content_base64: false
    )
    UI.message "this is the api key#{api_key}"

  end
end
